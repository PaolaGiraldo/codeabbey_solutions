#|$ sblint -v paolagiraldo.lsp
[INFO] Lint file paolagiraldo.lsp

$ clisp -c paolagiraldo.lsp
Compiling file /home/../paolagiraldo.lsp ...
Wrote file /home/../paolagiraldo.fas
0 errors, 0 warnings
Bye.
|#

(defun read-data (&optional (read-line))
  (declare (ignore read-line))
  (let (*read-eval*)
    (loop :for line = (read-line nil nil)
    :while line
    :collect (read-from-string (concatenate 'string line )))))

(defun my-concat( list )
  (format T "~%~{~a~}" list))

(defun find-digit (indexMissed sum)
  (let ((odddigit) (add))
  (loop for i in '(0 1 2 3 4 5 6 7 8 9) do
    (if (/= (mod indexMissed 2) 0)
      (progn
        (setq add i)
        (setq sum (+ sum add)))
      (progn
        (setq oddDigit (* i 2))
      (if (> oddDigit 9)
        (progn
          (setq add (- oddDigit 9))
          (setq sum (+ sum add)))
        (progn
          (setq add oddDigit)
          (setq sum (+ sum add))))))
    (if (= (mod sum 10) 0)
      (return i)
      (setq sum (- sum add))))))

(defun complete-digit (num indexMissed)
  (let ((sum 0) (digit) (oddDigit) (numberMiss) (carNum))
    (dotimes (i (length num))
      (setq digit (nth i num))
      (if (numberp digit)
        (progn
          (if (= (mod i 2) 0)
            (progn
              (setq sum (+ sum digit)))
            (progn
              (setq oddDigit (* digit 2))
          (if (> oddDigit 9)
            (setq sum (+ sum (- oddDigit 9)))
            (setq sum (+ sum oddDigit))))))))

    (setq numberMiss (find-digit indexMissed sum))
    (setq carNum (reverse num))
    (setf (nth indexMissed carNum) numberMiss)
    (block nil
    (return (my-concat carNum)))))

(defun swap-digit (num)
  (let ((aux) (aux1) (sum 0) (digit) (oddDigit))
    (dotimes (i (- (length num) 1))
      (setq aux (copy-list num))
      (setf (nth i aux) (nth (+ i 1) num))
      (setf (nth (+ i 1) aux) (nth i num))
      (setq aux1 (reverse aux))
      (setq sum 0)
      (dotimes (j (length aux1))
        (setq digit (nth j aux1))
      (if (= (mod j 2) 0)
        (progn
          (setq sum (+ sum digit)))
        (progn
          (setq oddDigit (* digit 2))
          (if (> oddDigit 9)
            (setq sum (+ sum (- oddDigit 9)))
            (setq sum (+ sum oddDigit))))))

       (if (= (mod sum 10) 0)
         (return (my-concat (reverse aux1)))))))

(defun check-error (data)
  (dolist (num data)
    (let ((numList) (indexMissed))
      (setq numList (map 'list (lambda (c)(or (digit-char-p c) '?))
        (prin1-to-string num)))
      (setq indexMissed (search "?" (write-to-string num)))
    (if indexMissed
      (complete-digit (reverse numList) indexMissed)
      (swap-digit numList)))))

(defvar data)
(setq data (cdr (read-data)))
(check-error data)

#|
$ cat DATA.lst | clisp paolagiraldo.lsp
5739263892273005 3799514658884712 5915272112246127 2981295768890597
1700883078753878 2347693508372653 7557380678378108 6142472983936300
6368392576260594 1387746325230224 9571709613024815 8293052546168048
7092433849777807 1813309198099897 6699506510871741 2780275945370997
1310046242981740 9102780297046208 4807040147475407 6409988728080383
8507080068594194 5028868799233058 9539361060729768 8397434639794010
3057457398818037 4133164391159023 7441322800409666 5358086496048014
2378786820962581 5166089273924797 3461312814036674 2663601620678226
7307356417962306 8401750157414978 5063457171092328 4465037237196680
5017828931748960 2265779950054465 1217802701375509 6462118287877334
9782068973840145 9465220448786775 8591461708264819 1980676304518490
5908489209217436 7034551122328286 9106497442194264 9191755309336344
|#
